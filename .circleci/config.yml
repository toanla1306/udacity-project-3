version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy_environment:
    description: destroy stack when create one of its failed
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack \
              --stack-name "udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}"
  aws_configure_credential:
    steps:
      - run:
          name: Create Credential Configuration AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set region $AWS_DEFAULT_REGION

jobs:
  # ----build frontend-----
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # code here
            cd frontend
            npm install 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  # -----build backend------
  build-backend:
    docker:
      - image: circleci/node:13.8.0
      - image: cimg/postgres:14.0
        environment: 
          POSTGRES_USER: postgres
          POSTGRES_DB: glee
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - setup_remote_docker: 
          version: 20.10.14
      - run:
          name: Build back-end
          command: |
            # code here
            echo $TYPEORM_ENTITIES
            cd backend
            npm install
            npm run start& 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  # -----test frontend----
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test 
          command: |
            cd frontend
            npm install
            npm run test
  # -----test backend-----
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test 
          command: |
            cd backend
            npm install
            npm run test
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  # -----scan-frontend-----
  scan-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
  # ----scan-backend-----
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  # ----deploy infrastructure frontend backend-----
  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout 
      - aws_configure_credential
      - run:
          name: isntall tar
          command: | 
            yum install -y tar gzip
      - run:
          name: Deploy Infrastructure Backend
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Deploy Infrastructure Frontend
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Deploy Infrastructure CloudFront
          command: | 
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Get IPv4 Public of server backend
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt | aws ec2 describe-instances \
              --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[].PublicDnsName" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy_environment

  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints:
            - "24:4e:39:7a:30:81:ed:c9:3b:a9:b8:0c:df:d3:1d:aa"
      - run: 
          name: Install independencies
          command: |
            apk add --update ansible
            apk add --no-cache aws-cli
      - attach_workspace:
          at: .
      - aws_configure_credential
      - run:
          name: Configure Infrastructure
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment

  run-migrations:
    docker: 
      - image: circleci/node:13.8.0
      - image: amazon/aws-cli
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - aws_configure_credential
      - run:
          name: run migration commnad 
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy_environment
    
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - "build-frontend"
      - test-backend:
          requires:
            - "build-backend"
      - scan-frontend:
          requires:
            - "build-frontend"
      - scan-backend:
          requires:
            - "build-backend"
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires:
            - "configure-infrastructure"